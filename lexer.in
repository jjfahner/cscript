
int parseNextToken(wchar_t const*& start, wchar_t const*& end)
{
  wchar_t const* qptr = 0;
  
  if(*start == 0)
  {
    return 0;
  }
  
  /*!re2c
  re2c:define:YYCTYPE  = "wchar_t";
  re2c:define:YYCURSOR = end;
  re2c:define:YYMARKER = qptr;
  re2c:yyfill:enable   = 0;
  re2c:yych:conversion = 1;
  re2c:indent:top      = 1;
  
  /* Whitespace */
  [ \t\r\n]+                { start = end; return parseNextToken(start, end); }
  
  /* Comments */
  "//".*"\n"                { start = end; return parseNextToken(start, end); }
  "/*".*"*/"                { start = end; return parseNextToken(start, end); }

  /* Keywords */
  "if"                      { return TOK_IF; }
  "else"                    { return TOK_ELSE; }
  "for"                     { return TOK_FOR; }
  "var"                     { return TOK_VAR; }
  "true"                    { return TOK_TRUE; }
  "false"                   { return TOK_FALSE; }
  "null"                    { return TOK_NULL; }
  "print"                   { return TOK_PRINT; }

  /* Identifiers */
  [a-zA-Z_][a-zA-Z_0-9]*    { return TOK_IDENTIFIER; }

  /* Number formats */  
  "-"?[0-9]+                { return TOK_INTEGER; }
  "-"?[0-9]+"."[0-9]+       { return TOK_REAL; }
  
  /* Strings */
  ["][^\"]*["]              { return TOK_STRING; }
  
  /* operators */
  ";"     { return TOK_SEMICOLON; }
  ","     { return TOK_COMMA; }
  "="     { return TOK_ASSIGN; }
  "+="    { return TOK_ASSADD; }
  "-="    { return TOK_ASSSUB; }
  "*="    { return TOK_ASSMUL; }
  "/="    { return TOK_ASSDIV; }
  "%="    { return TOK_ASSMOD; }
  "?"     { return TOK_QUESTION; }
  ":"     { return TOK_COLON; }
  "||"    { return TOK_LOGOR; }
  "&&"    { return TOK_LOGAND; }
  "|"     { return TOK_BITOR; }
  "^"     { return TOK_BITXOR; }
  "&"     { return TOK_BITAND; }
  "=="    { return TOK_EQUALS; }
  "!="    { return TOK_NEQUALS; }
  "<"     { return TOK_ST; }
  "<="    { return TOK_SE; }
  ">"     { return TOK_GT; }
  ">="    { return TOK_GE; }
  "+"     { return TOK_ADDOP; }
  "-"     { return TOK_SUBOP; }
  "*"     { return TOK_MULOP; }
  "/"     { return TOK_DIVOP; }
  "%"     { return TOK_MODOP; }
  "++"    { return TOK_ADDADD; }
  "--"    { return TOK_SUBSUB; }
  "."     { return TOK_DOT; }
  "["     { return TOK_LSBRACKET; }
  "]"     { return TOK_RSBRACKET; }
  "("     { return TOK_LRBRACKET; }
  ")"     { return TOK_RRBRACKET; }
  "{"     { return TOK_LCBRACKET; }
  "}"     { return TOK_RCBRACKET; }
  
  */
}
