//////////////////////////////////////////////////////////////////////////
//
// This file is © 2009 JJ Fahner <jan-jaap@jan-jaap.net>
// This file is part of the cscript interpreter.
// CScript can be found at http://svn.jan-jaap.net/
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////

//
// Lemon language definition for cscript regular expressions
//

//////////////////////////////////////////////////////////////////////////
//
// Include section
//
%include {

#include <cassert>

// switch statement contains 'default' but no 'case' labels
#pragma warning(disable:4065)

struct Quantifier
{
  int m_min;
  int m_max;
  bool m_greedy;
};

}
//
// End inclusion block
//
//////////////////////////////////////////////////////////////////////////

// Generated function names
%name             ReParse

// Token prefix
%token_prefix     RE_

// Token type
%token_type       { char }

// Argument to reduces
%extra_argument   { RegexCompiler* p }

// Default result type
%default_type     { Pair }

// Error handlers
%syntax_error {
  p->OnSyntaxError(TOKEN);
}

// Starting point of parser
main ::= expression(A) . { p->ParseComplete(A); }

// Regular expression with optional anchors
expression(R) ::= alternation(A) . { R = A; }

// Alternation
alternation(R) ::= branch(A) . { R = A; }
alternation(R) ::= alternation(A) ALTERNATE branch(B) . { p->AddAlternation(A, B, R); }

// Branch
branch(R) ::= sequence(A) . { R = A; }
branch(R) ::= anchor_l(A) . { R = A; }
branch(R) ::= anchor_r(A) . { R = A; }
branch(R) ::= anchor_l(A) anchor_r(B) . { p->AddSequence(A, B, R); }
branch(R) ::= anchor_l(A) sequence(B) . { p->AddSequence(A, B, R); }
branch(R) ::= sequence(A) anchor_r(B) . { p->AddSequence(A, B, R); }
branch(R) ::= anchor_l(A) sequence(B) anchor_r(C) . {
  Pair R1; 
  p->AddSequence(A, B, R1);
  p->AddSequence(R1, C, R); 
}

// Anchors
anchor_l(R) ::= ANCHOR_L . { p->AddAtom(R, ttAnchorL); }
anchor_r(R) ::= ANCHOR_R . { p->AddAtom(R, ttAnchorR); }

// Sequence
sequence(R) ::= particle(A) . { R = A; }
sequence(R) ::= sequence(A) particle(B) . { p->AddSequence(A, B, R); }

// Atoms
particle(R) ::= atom(A) .                   { R = A; }
particle(R) ::= atom(A) QUESTION .          { p->AddQuantifier(A, 0, 1, true,  R); }
particle(R) ::= atom(A) QUESTION QUESTION . { p->AddQuantifier(A, 0, 1, false, R); }
particle(R) ::= atom(A) STAR .              { p->AddQuantifier(A, 0, 0, true,  R); }
particle(R) ::= atom(A) STAR QUESTION.      { p->AddQuantifier(A, 0, 0, false, R); }
particle(R) ::= atom(A) PLUS .              { p->AddQuantifier(A, 1, 0, true,  R); }
particle(R) ::= atom(A) PLUS QUESTION.      { p->AddQuantifier(A, 1, 0, false, R); }
particle(R) ::= atom(A) quantifier(B) .     { p->AddQuantifier(A, B.m_min, B.m_max, B.m_greedy, R); }

// Single-character atoms
atom(R) ::= class(A) .   { R = A; }
atom(R) ::= ANY .        { p->AddAtom(R, ttAny); }
atom(R) ::= DASH(A) .    { p->AddAtom(R, ttChar, A); }
atom(R) ::= COMMA(A) .   { p->AddAtom(R, ttChar, A); }
atom(R) ::= CHAR(A) .    { p->AddAtom(R, ttChar, A); }
atom(R) ::= letter(A) .  { p->AddAtom(R, ttChar, A); }
atom(R) ::= INT(A) .     { p->AddAtom(R, ttChar, A); }
atom(R) ::= COLON(A) .   { p->AddAtom(R, ttChar, A); }
atom(R) ::= BACKREF(A) . { p->AddBackref(A, R); }

// Complex atoms
atom(R) ::= range(A) . { R = A; }
atom(R) ::= LPAREN expression(A) RPAREN . { p->AddCapture(A, R); }
atom(R) ::= LPAREN QUESTION COLON expression(A) RPAREN . { R = A; }
atom(R) ::= LPAREN QUESTION identifier COLON expression(A) RPAREN . { p->AddNamedCapture(A, R); }

// Range characters
%type range_char { char }
range_char(R) ::= CHAR(A)   . { R = A; }
range_char(R) ::= letter(A) . { R = A; }
range_char(R) ::= INT(A)    . { R = A; }
range_char(R) ::= LBRACE(A) . { R = A; }
range_char(R) ::= RBRACE(A) . { R = A; }
range_char(R) ::= LPAREN(A) . { R = A; }
range_char(R) ::= RPAREN(A) . { R = A; }
range_char(R) ::= COMMA(A)  . { R = A; }
range_char(R) ::= ANCHOR_R(A)  . { R = A; }
range_char(R) ::= ANY(A)       . { R = A; }
range_char(R) ::= STAR(A)      . { R = A; }
range_char(R) ::= QUESTION(A)  . { R = A; }
range_char(R) ::= PLUS(A)      . { R = A; }
range_char(R) ::= ALTERNATE(A) . { R = A; }
//range_char(R) ::= DASH(A)   . { R = A; }
//range_char(R) ::= COLON(A)  . { R = A; }
//range_char(R) ::= ANCHOR_L(A)  . { R = A; }

// Character range
range(R) ::= LBRACKET range_sequence(A) RBRACKET . { R = A; }

// Range contents
range_sequence(R) ::= range_atom(A) . { R = A; }
range_sequence(R) ::= range_sequence(A) range_atom(B) . { p->AddAlternation(A, B, R); }

// Range atoms
range_atom(R) ::= range_char(A) . { p->AddAtom(R, ttChar, A); }
range_atom(R) ::= range_char(A) DASH range_char(B) . { p->AddAtom(R, ttRange, A, B); }

// Inverse range
range(R) ::= LBRACKET ANCHOR_L inv_range_sequence(A) RBRACKET . { R = A; }

// Range contents
inv_range_sequence(R) ::= inv_range_atom(A) . { R = A; }
inv_range_sequence(R) ::= inv_range_sequence(A) inv_range_atom(B) . { p->AddSequence(A, B, R); }

// Range atoms
inv_range_atom(R) ::= range_char(A) . { p->AddAtom(R, ttNChar, A, A); }
inv_range_atom(R) ::= range_char(A) DASH range_char(B) . { p->AddAtom(R, ttNRange, A, B); }

// Free quantifiers
%type quantifier { Quantifier }
quantifier(R) ::= LBRACE int(L) quant_e(G) .              { R.m_min = L; R.m_max = L; R.m_greedy = G; }
quantifier(R) ::= LBRACE int(L) COMMA quant_e(G) .        { R.m_min = L; R.m_max = 0; R.m_greedy = G; }
quantifier(R) ::= LBRACE int(L) COMMA int(H) quant_e(G) . { R.m_min = L; R.m_max = H; R.m_greedy = G; }
quantifier(R) ::= LBRACE COMMA int(H) quant_e(G) .        { R.m_min = 0; R.m_max = H; R.m_greedy = G; }

%type quant_e { bool }
quant_e(R) ::= RBRACE . { R = true; }
quant_e(R) ::= RBRACE QUESTION . { R = false; }

// Integer, used in free quantifiers
%type int { int }
int(R) ::= INT(A) . { R = A - '0'; }
int(R) ::= int(A) INT(B) . { R = A * 10 + (B - '0'); }

// Identifier, used for variable names
identifier ::= letter(A) . { p->AddIdentifierChar(A); }
identifier ::= identifier letter(A) . { p->AddIdentifierChar(A); }

//////////////////////////////////////////////////////////////////////////
//
// Character classes
//

cc_alnum (R) ::= LBRACKET COLON lc_a lc_l lc_n lc_u lc_m COLON RBRACKET . { p->AddAtom(R, ccAlnum); }
cc_alpha (R) ::= LBRACKET COLON lc_a lc_l lc_p lc_h lc_a COLON RBRACKET . { p->AddAtom(R, ccAlpha); }
cc_blank (R) ::= LBRACKET COLON lc_b lc_l lc_a lc_n lc_k COLON RBRACKET . { p->AddAtom(R, ccBlank); }
cc_cntrl (R) ::= LBRACKET COLON lc_c lc_n lc_t lc_r lc_l COLON RBRACKET . { p->AddAtom(R, ccCntrl); }
cc_digit (R) ::= LBRACKET COLON lc_d lc_i lc_g lc_i lc_t COLON RBRACKET . { p->AddAtom(R, ccDigit); }
cc_graph (R) ::= LBRACKET COLON lc_g lc_r lc_a lc_p lc_h COLON RBRACKET . { p->AddAtom(R, ccGraph); }
cc_lower (R) ::= LBRACKET COLON lc_l lc_o lc_w lc_e lc_r COLON RBRACKET . { p->AddAtom(R, ccLower); }
cc_print (R) ::= LBRACKET COLON lc_p lc_r lc_i lc_n lc_t COLON RBRACKET . { p->AddAtom(R, ccPrint); }
cc_punct (R) ::= LBRACKET COLON lc_p lc_u lc_n lc_c lc_t COLON RBRACKET . { p->AddAtom(R, ccPunct); }
cc_space (R) ::= LBRACKET COLON lc_s lc_p lc_a lc_c lc_e COLON RBRACKET . { p->AddAtom(R, ccSpace); }
cc_upper (R) ::= LBRACKET COLON lc_u lc_p lc_p lc_e lc_r COLON RBRACKET . { p->AddAtom(R, ccUpper); }
cc_xdigit(R) ::= LBRACKET COLON lc_x lc_d lc_i lc_g lc_i lc_t COLON RBRACKET . { p->AddAtom(R, ccXdigit); }

class(R) ::= cc_alnum (A) . { R = A; }
class(R) ::= cc_alpha (A) . { R = A; }
class(R) ::= cc_blank (A) . { R = A; }
class(R) ::= cc_cntrl (A) . { R = A; }
class(R) ::= cc_digit (A) . { R = A; }
class(R) ::= cc_graph (A) . { R = A; }
class(R) ::= cc_lower (A) . { R = A; }
class(R) ::= cc_print (A) . { R = A; }
class(R) ::= cc_punct (A) . { R = A; }
class(R) ::= cc_space (A) . { R = A; }
class(R) ::= cc_upper (A) . { R = A; }
class(R) ::= cc_xdigit(A) . { R = A; }
class(R) ::= CLASS(A)     . { p->AddAtom(R, (TransitionTypes)A); }

//////////////////////////////////////////////////////////////////////////
//
// All letters
//

%type letter { char }
letter(R) ::= lcase(A) . { R = A; }
letter(R) ::= ucase(A) . { R = A; }

//////////////////////////////////////////////////////////////////////////
//
// Lowercase letters
//

%type lc_a { char } lc_a(R) ::= LC_A(A) . { R = A; }
%type lc_b { char } lc_b(R) ::= LC_B(A) . { R = A; }
%type lc_c { char } lc_c(R) ::= LC_C(A) . { R = A; }
%type lc_d { char } lc_d(R) ::= LC_D(A) . { R = A; }
%type lc_e { char } lc_e(R) ::= LC_E(A) . { R = A; }
%type lc_f { char } lc_f(R) ::= LC_F(A) . { R = A; }
%type lc_g { char } lc_g(R) ::= LC_G(A) . { R = A; }
%type lc_h { char } lc_h(R) ::= LC_H(A) . { R = A; }
%type lc_i { char } lc_i(R) ::= LC_I(A) . { R = A; }
%type lc_j { char } lc_j(R) ::= LC_J(A) . { R = A; }
%type lc_k { char } lc_k(R) ::= LC_K(A) . { R = A; }
%type lc_l { char } lc_l(R) ::= LC_L(A) . { R = A; }
%type lc_m { char } lc_m(R) ::= LC_M(A) . { R = A; }
%type lc_n { char } lc_n(R) ::= LC_N(A) . { R = A; }
%type lc_o { char } lc_o(R) ::= LC_O(A) . { R = A; }
%type lc_p { char } lc_p(R) ::= LC_P(A) . { R = A; }
%type lc_q { char } lc_q(R) ::= LC_Q(A) . { R = A; }
%type lc_r { char } lc_r(R) ::= LC_R(A) . { R = A; }
%type lc_s { char } lc_s(R) ::= LC_S(A) . { R = A; }
%type lc_t { char } lc_t(R) ::= LC_T(A) . { R = A; }
%type lc_u { char } lc_u(R) ::= LC_U(A) . { R = A; }
%type lc_v { char } lc_v(R) ::= LC_V(A) . { R = A; }
%type lc_w { char } lc_w(R) ::= LC_W(A) . { R = A; }
%type lc_x { char } lc_x(R) ::= LC_X(A) . { R = A; }
%type lc_y { char } lc_y(R) ::= LC_Y(A) . { R = A; }
%type lc_z { char } lc_z(R) ::= LC_Z(A) . { R = A; }

%type lcase { char }
lcase(R) ::= lc_a(A) . { R = A; }
lcase(R) ::= lc_b(A) . { R = A; }
lcase(R) ::= lc_c(A) . { R = A; }
lcase(R) ::= lc_d(A) . { R = A; }
lcase(R) ::= lc_e(A) . { R = A; }
lcase(R) ::= lc_f(A) . { R = A; }
lcase(R) ::= lc_g(A) . { R = A; }
lcase(R) ::= lc_h(A) . { R = A; }
lcase(R) ::= lc_i(A) . { R = A; }
lcase(R) ::= lc_j(A) . { R = A; }
lcase(R) ::= lc_k(A) . { R = A; }
lcase(R) ::= lc_l(A) . { R = A; }
lcase(R) ::= lc_m(A) . { R = A; }
lcase(R) ::= lc_n(A) . { R = A; }
lcase(R) ::= lc_o(A) . { R = A; }
lcase(R) ::= lc_p(A) . { R = A; }
lcase(R) ::= lc_q(A) . { R = A; }
lcase(R) ::= lc_r(A) . { R = A; }
lcase(R) ::= lc_s(A) . { R = A; }
lcase(R) ::= lc_t(A) . { R = A; }
lcase(R) ::= lc_u(A) . { R = A; }
lcase(R) ::= lc_v(A) . { R = A; }
lcase(R) ::= lc_w(A) . { R = A; }
lcase(R) ::= lc_x(A) . { R = A; }
lcase(R) ::= lc_y(A) . { R = A; }
lcase(R) ::= lc_z(A) . { R = A; }

//////////////////////////////////////////////////////////////////////////
//
// Uppercase letters
//

%type uc_a { char } uc_a(R) ::= UC_A(A) . { R = A; }
%type uc_b { char } uc_b(R) ::= UC_B(A) . { R = A; }
%type uc_c { char } uc_c(R) ::= UC_C(A) . { R = A; }
%type uc_d { char } uc_d(R) ::= UC_D(A) . { R = A; }
%type uc_e { char } uc_e(R) ::= UC_E(A) . { R = A; }
%type uc_f { char } uc_f(R) ::= UC_F(A) . { R = A; }
%type uc_g { char } uc_g(R) ::= UC_G(A) . { R = A; }
%type uc_h { char } uc_h(R) ::= UC_H(A) . { R = A; }
%type uc_i { char } uc_i(R) ::= UC_I(A) . { R = A; }
%type uc_j { char } uc_j(R) ::= UC_J(A) . { R = A; }
%type uc_k { char } uc_k(R) ::= UC_K(A) . { R = A; }
%type uc_l { char } uc_l(R) ::= UC_L(A) . { R = A; }
%type uc_m { char } uc_m(R) ::= UC_M(A) . { R = A; }
%type uc_n { char } uc_n(R) ::= UC_N(A) . { R = A; }
%type uc_o { char } uc_o(R) ::= UC_O(A) . { R = A; }
%type uc_p { char } uc_p(R) ::= UC_P(A) . { R = A; }
%type uc_q { char } uc_q(R) ::= UC_Q(A) . { R = A; }
%type uc_r { char } uc_r(R) ::= UC_R(A) . { R = A; }
%type uc_s { char } uc_s(R) ::= UC_S(A) . { R = A; }
%type uc_t { char } uc_t(R) ::= UC_T(A) . { R = A; }
%type uc_u { char } uc_u(R) ::= UC_U(A) . { R = A; }
%type uc_v { char } uc_v(R) ::= UC_V(A) . { R = A; }
%type uc_w { char } uc_w(R) ::= UC_W(A) . { R = A; }
%type uc_x { char } uc_x(R) ::= UC_X(A) . { R = A; }
%type uc_y { char } uc_y(R) ::= UC_Y(A) . { R = A; }
%type uc_z { char } uc_z(R) ::= UC_Z(A) . { R = A; }

%type ucase { char }
ucase(R) ::= uc_a(A) . { R = A; }
ucase(R) ::= uc_b(A) . { R = A; }
ucase(R) ::= uc_c(A) . { R = A; }
ucase(R) ::= uc_d(A) . { R = A; }
ucase(R) ::= uc_e(A) . { R = A; }
ucase(R) ::= uc_f(A) . { R = A; }
ucase(R) ::= uc_g(A) . { R = A; }
ucase(R) ::= uc_h(A) . { R = A; }
ucase(R) ::= uc_i(A) . { R = A; }
ucase(R) ::= uc_j(A) . { R = A; }
ucase(R) ::= uc_k(A) . { R = A; }
ucase(R) ::= uc_l(A) . { R = A; }
ucase(R) ::= uc_m(A) . { R = A; }
ucase(R) ::= uc_n(A) . { R = A; }
ucase(R) ::= uc_o(A) . { R = A; }
ucase(R) ::= uc_p(A) . { R = A; }
ucase(R) ::= uc_q(A) . { R = A; }
ucase(R) ::= uc_r(A) . { R = A; }
ucase(R) ::= uc_s(A) . { R = A; }
ucase(R) ::= uc_t(A) . { R = A; }
ucase(R) ::= uc_u(A) . { R = A; }
ucase(R) ::= uc_v(A) . { R = A; }
ucase(R) ::= uc_w(A) . { R = A; }
ucase(R) ::= uc_x(A) . { R = A; }
ucase(R) ::= uc_y(A) . { R = A; }
ucase(R) ::= uc_z(A) . { R = A; }

