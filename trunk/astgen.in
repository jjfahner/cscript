//////////////////////////////////////////////////////////////////////////
//
// This file is © 2007 JJ Fahner <jan-jaap@jan-jaap.net>
// This file is part of the cscript interpreter.
// CScript can be found at http://svn.jan-jaap.net/
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////

//
// Lemon language definition for cscript
//

//////////////////////////////////////////////////////////////////////////
//
// Include section
//
%include {

#include "tokens.h"
#include "parser.h"
#include "ast.h"

#pragma warning(disable:4065)

} 
//
// End inclusion block
//
//////////////////////////////////////////////////////////////////////////

// Set prefix for tokens
%name             CScriptParse
%token_prefix     TOK_
%token_type       { Token }
%extra_argument   { Parser* p }
%default_type     { Ast* }

// Error handlers
%parse_failure {
  p->OnParseFailure();
}
%syntax_error {
  p->OnSyntaxError();
}

// Precedence rules for binary operators
%left LOGOR .
%left LOGAND .
%left BITOR .
%left BITXOR .
%left BITAND .
%left EQUALS NEQUALS .
%left ST SE GT GE .
%left ADDOP SUBOP .
%left MULOP DIVOP MODOP .
%right ASSIGN ASSADD ASSSUB ASSMUL ASSDIV ASSMOD .

// Start symbol
main ::= translation_unit(A) . { p->SetRoot(A); }

// Translation unit
translation_unit(R) ::= statement_sequence_opt(A) . { R = p->AllocAst(translation_unit, A); }

// Statement sequence
statement_sequence(R) ::= statement(A) . { R = A; }
statement_sequence(R) ::= statement_sequence(A) statement(B) . { 
  if(A->m_type == statement_sequence) {
    R = A;
  }
  else {
    R = p->AllocAst(statement_sequence, new AstList);
    R->m_a1.GetList()->push_back(A);
  }
  R->m_a1.GetList()->push_back(B);
}


// Optional statement sequence
statement_sequence_opt(R) ::= . { R = 0; }
statement_sequence_opt(R) ::= statement_sequence(A) . { R = A; }

// Statement
statement(R) ::= include_statement(A) .     { R = A; }
statement(R) ::= expression_statement(A) .  { R = A; }
statement(R) ::= declaration_statement(A) . { R = A; }
statement(R) ::= for_statement(A) .         { R = A; }
statement(R) ::= compound_statement(A) .    { R = A; }
statement(R) ::= if_statement(A) .          { R = A; }
statement(R) ::= while_statement(A) .       { R = A; }
statement(R) ::= foreach_statement(A) .     { R = A; }
statement(R) ::= return_statement(A) .      { R = A; }
statement(R) ::= switch_statement(A) .      { R = A; }
statement(R) ::= break_statement(A) .       { R = A; }
statement(R) ::= continue_statement(A) .    { R = A; }

// Error recovery
statement(R) ::= error .                    { R = p->AllocAst(empty_statement); }

//////////////////////////////////////////////////////////////////////////
//
// Expressions
//

// Expression
expression(R) ::= assignment_expression(A) . { R = A; }

// Optional expression
expression_opt(R) ::= .               { R = 0; }
expression_opt(R) ::= expression(A) . { R = A; }

// Assignment
assignment_expression(R) ::= conditional_expression(A) . { R = A; }
assignment_expression(R) ::= binary_expression(A) assignment_operator(T) assignment_expression(B) . { R = p->AllocAst(assignment_expression, T, A, B); }

// Assignment operator
%type assignment_operator { opcodes }
assignment_operator(R) ::= ASSIGN . { R = op_assign; }
assignment_operator(R) ::= ASSADD . { R = op_assadd; }
assignment_operator(R) ::= ASSSUB . { R = op_asssub; }
assignment_operator(R) ::= ASSMUL . { R = op_assmul; }
assignment_operator(R) ::= ASSDIV . { R = op_assdiv; }
assignment_operator(R) ::= ASSMOD . { R = op_assmod; }

// Conditional
conditional_expression(R) ::= binary_expression(A) . { R = A; }
conditional_expression(R) ::= binary_expression(A) QUESTION expression(B) COLON assignment_expression(C) . { R = p->AllocAst(ternary_expression, A, B, C); }

// Binary expressions
binary_expression(R) ::= unary_expression(A) . { R = A; }
binary_expression(R) ::= binary_expression(A) LOGOR   binary_expression(B). { R = p->AllocAst(binary_expression, op_logor,   A, B); }
binary_expression(R) ::= binary_expression(A) LOGAND  binary_expression(B). { R = p->AllocAst(binary_expression, op_logand,  A, B); }
binary_expression(R) ::= binary_expression(A) BITOR   binary_expression(B). { R = p->AllocAst(binary_expression, op_bitor,   A, B); }
binary_expression(R) ::= binary_expression(A) BITXOR  binary_expression(B). { R = p->AllocAst(binary_expression, op_bitxor,  A, B); }
binary_expression(R) ::= binary_expression(A) BITAND  binary_expression(B). { R = p->AllocAst(binary_expression, op_bitand,  A, B); }
binary_expression(R) ::= binary_expression(A) EQUALS  binary_expression(B). { R = p->AllocAst(binary_expression, op_eq,   A, B); }
binary_expression(R) ::= binary_expression(A) NEQUALS binary_expression(B). { R = p->AllocAst(binary_expression, op_ne,   A, B); }
binary_expression(R) ::= binary_expression(A) ST      binary_expression(B). { R = p->AllocAst(binary_expression, op_lt,   A, B); }
binary_expression(R) ::= binary_expression(A) SE      binary_expression(B). { R = p->AllocAst(binary_expression, op_le,   A, B); }
binary_expression(R) ::= binary_expression(A) GT      binary_expression(B). { R = p->AllocAst(binary_expression, op_gt,   A, B); }
binary_expression(R) ::= binary_expression(A) GE      binary_expression(B). { R = p->AllocAst(binary_expression, op_ge,   A, B); }
binary_expression(R) ::= binary_expression(A) ADDOP   binary_expression(B). { R = p->AllocAst(binary_expression, op_add,  A, B); }
binary_expression(R) ::= binary_expression(A) SUBOP   binary_expression(B). { R = p->AllocAst(binary_expression, op_sub,  A, B); }
binary_expression(R) ::= binary_expression(A) MULOP   binary_expression(B). { R = p->AllocAst(binary_expression, op_mul,  A, B); }
binary_expression(R) ::= binary_expression(A) DIVOP   binary_expression(B). { R = p->AllocAst(binary_expression, op_div,  A, B); }
binary_expression(R) ::= binary_expression(A) MODOP   binary_expression(B). { R = p->AllocAst(binary_expression, op_mod,  A, B); }

// Unary expression
unary_expression(R) ::= postfix_expression(A) .      { R = A; } 
unary_expression(R) ::= SUBOP  unary_expression(A) . { R = p->AllocAst(prefix_expression, op_negate, A); }
unary_expression(R) ::= ADDADD unary_expression(A) . { R = p->AllocAst(prefix_expression, op_preinc, A); }
unary_expression(R) ::= SUBSUB unary_expression(A) . { R = p->AllocAst(prefix_expression, op_predec, A); }
unary_expression(R) ::= new_expression(A) .          { R = A; }

// Postfix expression
postfix_expression(R) ::= primary_expression(A) .                                 { R = A; }
postfix_expression(R) ::= postfix_expression(A) ADDADD .                          { R = p->AllocAst(postfix_expression, op_postinc, A); }
postfix_expression(R) ::= postfix_expression(A) SUBSUB .                          { R = p->AllocAst(postfix_expression, op_postdec, A); }
postfix_expression(R) ::= postfix_expression(A) DOT IDENTIFIER(B).                { R = p->AllocAst(member_expression, A, String(B)); }
postfix_expression(R) ::= postfix_expression(A) LBRACKET expression(B) RBRACKET.  { R = p->AllocAst(index_expression, A, B); }
postfix_expression(R) ::= IDENTIFIER(A) LPAREN                  RPAREN .          { R = p->AllocAst(function_call, String(A)); }
postfix_expression(R) ::= IDENTIFIER(A) LPAREN argument_list(B) RPAREN .          { R = p->AllocAst(function_call, String(A), B); }

// Primary expression
primary_expression(R) ::= literal(A) .                  { R = A; }
primary_expression(R) ::= id_expression(A) .            { R = A; }
primary_expression(R) ::= LPAREN expression(A) RPAREN . { R = A; }
primary_expression(R) ::= list_literal(A) .             { R = A; }

// Literals
literal(R) ::= INTEGER(A) . { R = p->AllocAst(literal, Variant(String(A), Variant::stInt)); }
literal(R) ::= REAL(A) .    { R = p->AllocAst(literal, Variant(String(A), Variant::stReal)); } 
literal(R) ::= STRING(A) .  { R = p->AllocAst(literal, Variant(String(A), Variant::stString)); }
literal(R) ::= TRUE .       { R = p->AllocAst(literal, Variant(true));    }
literal(R) ::= FALSE .      { R = p->AllocAst(literal, Variant(false));   }
literal(R) ::= NULL .       { R = p->AllocAst(literal, Variant());        }

// Id expression
id_expression(R) ::= IDENTIFIER(A) . { R = p->AllocAst(lvalue, String(A)); }

// List definition
list_literal(R) ::= LBRACKET list_content(A) RBRACKET . { R = p->AllocAst(list_literal, A); }
list_content(R) ::= list_entry(A) . { R = p->AllocAst(list_content, A); }
list_content(R) ::= list_content(A) COMMA list_entry(B) . { R = p->AllocAst(list_content, A, B); }
list_entry(R)   ::= expression(A) . { R = p->AllocAst(list_entry, A); }

// New expression
new_expression(R) ::= NEW IDENTIFIER(A) . { R = p->AllocAst(new_expression, String(A)); }

//////////////////////////////////////////////////////////////////////////
//
// Function calls
//

// An argument is any expression. If expression lists become part
// of the language, this will have to be changed to something else.
argument(R) ::= expression(A) . { R = p->AllocAst(argument, A); }

// Argument list containing 1 or more arguments
argument_list(R) ::= argument(A) . { R = A; }
argument_list(R) ::= argument_list(A) COMMA argument(B) . { R = p->AllocAst(argument_list, A, B); }

//////////////////////////////////////////////////////////////////////////
//
// Simple statements
//

// Expression statement
expression_statement(R) ::= SEMICOLON .               { R = p->AllocAst(empty_statement); }
expression_statement(R) ::= expression(A) SEMICOLON . { R = p->AllocAst(expression_statement, A); }

// Compound statement
compound_statement(R) ::= LBRACE RBRACE .                       { R = p->AllocAst(compound_statement); }
compound_statement(R) ::= LBRACE statement_sequence(A) RBRACE . { R = p->AllocAst(compound_statement, A); }

// Include statement
include_statement(R) ::= INCLUDE STRING(A) SEMICOLON . { p->Parse(A); R = p->GetRoot(); }

// Return statement - leaves return expression on the stack
return_statement(R) ::= RETURN expression(A) SEMICOLON . { R = p->AllocAst(return_statement, A); }
return_statement(R) ::= RETURN SEMICOLON .               { R = p->AllocAst(return_statement);    }

// Break/continue
break_statement(R)    ::= BREAK SEMICOLON .    { R = p->AllocAst(break_statement); }
continue_statement(R) ::= CONTINUE SEMICOLON . { R = p->AllocAst(continue_statement); }

//////////////////////////////////////////////////////////////////////////
//
// Variable declaration
//

// Declaration starting point
declaration_statement(R) ::= function_declaration(A) .            { R = A; }
declaration_statement(R) ::= struct_declaration(A) SEMICOLON .    { R = A; }
declaration_statement(R) ::= variable_declaration(A) SEMICOLON .  { R = A; }

variable_declaration(R) ::= VAR           declarator_sequence(A) . { R = A; }
variable_declaration(R) ::= IDENTIFIER(A) declarator_sequence(B) . { R = B; R->m_a3 = String(A); }

declarator(R) ::= IDENTIFIER(A) .                      { R = p->AllocAst(variable_declaration, String(A));    }
declarator(R) ::= IDENTIFIER(A) ASSIGN expression(B) . { R = p->AllocAst(variable_declaration, String(A), B); }

declarator_sequence(R) ::= declarator(A) . { R = A; }
declarator_sequence(R) ::= declarator_sequence(A) COMMA declarator(B) . { R = p->AllocAst(declaration_sequence, A, B); }


//////////////////////////////////////////////////////////////////////////
//
// struct declaration
//

// Struct declaration. Unlike C, a struct declaration doesn't require (but does allow) a terminating semicolon to be valid.
struct_declaration(R) ::= STRUCT IDENTIFIER(A) LBRACE                   RBRACE . { R = p->AllocAst(struct_declaration, String(A)); }
struct_declaration(R) ::= STRUCT IDENTIFIER(A) LBRACE struct_members(B) RBRACE . { R = p->AllocAst(struct_declaration, String(A), B); }

// Struct member
struct_member(R) ::= variable_declaration(A) SEMICOLON . { R = A; }

// Struct members
struct_members(R) ::= struct_member(A) . { R = A; }
struct_members(R) ::= struct_members(A) struct_member(B) . { R = p->AllocAst(struct_members, A, B); }

//////////////////////////////////////////////////////////////////////////
//
// Function declaration
//

// Function declaration
function_declaration(R) ::= FUNCTION IDENTIFIER(A) LPAREN parameter_list(B) RPAREN function_body(C) . { R = p->AllocAst(function_declaration, String(A), B, C); }
function_declaration(R) ::= FUNCTION IDENTIFIER(A) LPAREN                   RPAREN function_body(C) . { R = p->AllocAst(function_declaration, String(A), AstData(), C); }

// Single parameter
parameter(R) ::= IDENTIFIER(A) . { R = p->AllocAst(parameter, String(A)); }

// Optional parameter
opt_parameter(R) ::= IDENTIFIER(A) ASSIGN expression(B) . { R = p->AllocAst(parameter, String(A), B); }

// List of parameters
parameters(R) ::= parameter(A) . { R = A; }
parameters(R) ::= parameters(A) COMMA parameter(B) . { R = p->AllocAst(parameter_list, A, B); }

// List of optional parameters
opt_parameters(R) ::= opt_parameter(A) . { R = A; }
opt_parameters(R) ::= opt_parameters(A) COMMA opt_parameter(B) . { R = p->AllocAst(parameter_list, A, B); }

// Parameter list
parameter_list(R) ::= parameters(A) .     { R = A; }
parameter_list(R) ::= opt_parameters(A) . { R = A; }
parameter_list(R) ::= parameters(A) COMMA opt_parameters(B) . { R = p->AllocAst(parameter_list, A, B); }

// Function body. Traditionally, this is a compound statement, but
// there's no actual need for that.
function_body(R) ::= statement(A) . { R = A; }

//////////////////////////////////////////////////////////////////////////
//
// For statement
//

// For statement - main structure
for_statement(R) ::= FOR LPAREN for_init_statement(A) expression(B) SEMICOLON expression_opt(C) RPAREN statement(D) . { R = p->AllocAst(for_statement, A, B, C, D); }

// For init statement
for_init_statement(R) ::= expression_statement(A) .           { R = A; }
for_init_statement(R) ::= variable_declaration(A) SEMICOLON . { R = A; }

//////////////////////////////////////////////////////////////////////////
//
// Foreach statement
//

foreach_statement(R) ::= FOR LPAREN id_expression(A) IN expression(B) RPAREN statement(C) . { R = p->AllocAst(foreach_statement, A, B, C); }

//////////////////////////////////////////////////////////////////////////
//
// If statement
//

%left LOWER_THAN_ELSE.
%left ELSE.

// Main if statement
if_statement(R) ::= IF LPAREN expression(A) RPAREN statement(B) . [LOWER_THAN_ELSE] { R = p->AllocAst(if_statement, A, B); } 
if_statement(R) ::= IF LPAREN expression(A) RPAREN statement(B) ELSE statement(C) . { R = p->AllocAst(if_statement, A, B, C); }

//////////////////////////////////////////////////////////////////////////
//
// While statement
//

// Basic while
while_statement(R) ::= WHILE LPAREN expression(A) RPAREN statement(B) . { R = p->AllocAst(while_statement, A,  B); }

//////////////////////////////////////////////////////////////////////////
//
// Switch statement
//

// Main switch statement
switch_statement(R) ::= SWITCH LPAREN expression(A) RPAREN LBRACE switch_body(B) RBRACE . { R = p->AllocAst(switch_statement, A, B); }

// Switch content
%type switch_body { AstList* }
switch_body(R) ::= . { R = new AstList; }
switch_body(R) ::= switch_body(A) switch_case(B)  . { R = A; R->push_back(B); }
switch_body(R) ::= switch_body(A) default_case(B) . { R = A; R->push_back(B); }

// Regular case
switch_case(R) ::= CASE literal(A) COLON case_statements(B) . { R = p->AllocAst(switch_case, A, B); }

// Default case
default_case(R) ::= DEFAULT COLON case_statements(A) . { R = p->AllocAst(default_case, A); }

// Case content
case_statements(R) ::= statement_sequence(A) . { R = A; }
