//////////////////////////////////////////////////////////////////////////
//
// This file is © 2007 JJ Fahner <jan-jaap@jan-jaap.net>
// This file is part of the cscript interpreter.
// CScript can be found at http://svn.jan-jaap.net/
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////

int parseNextToken(Char*& start, Char*& end)
{
  Char* qptr = 0;
  
  if(*start == 0)
  {
    return 0;
  }
  
  /*!re2c
  re2c:define:YYCTYPE  = "Char";
  re2c:define:YYCURSOR = end;
  re2c:define:YYMARKER = qptr;
  re2c:yyfill:enable   = 0;
  re2c:yych:conversion = 1;
  re2c:indent:top      = 1;
  
  /* Whitespace */
  [ \t]+                    { return TOK_WHITESPACE; }
  
  /* Newlines */
  "\r"*"\n"                 { return TOK_NEWLINE; }
  
  /* Comments */
  "//"                      { return TOK_COMMENT; }
  "/*"                      { return TOK_COMMENT; }

  /* Keywords */
  "bool"                    { return TOK_BOOL; }
  "break"                   { return TOK_BREAK; }
  "case"                    { return TOK_CASE; }
  "catch"                   { return TOK_CATCH; }
  "class"                   { return TOK_CLASS; }
  "continue"                { return TOK_CONTINUE; }
  "default"                 { return TOK_DEFAULT; }
  "else"                    { return TOK_ELSE; }
  "extern"                  { return TOK_EXTERN; }
  "false"                   { return TOK_FALSE; }
  "finally"                 { return TOK_FINALLY; }
  "for"                     { return TOK_FOR; }
  "function"				        { return TOK_FUNCTION; }
  "if"                      { return TOK_IF; }
  "in"                      { return TOK_IN; }
  "include"                 { return TOK_INCLUDE; }
  "int"                     { return TOK_INT; }
  "new"                     { return TOK_NEW; }
  "null"                    { return TOK_NULL; }
  "return"                  { return TOK_RETURN; }
  "string"                  { return TOK_STRING; }
  "switch"                  { return TOK_SWITCH; }
  "this"                    { return TOK_THIS; }
  "throw"                   { return TOK_THROW; }
  "true"                    { return TOK_TRUE; }
  "try"                     { return TOK_TRY; }
  "var"                     { return TOK_VAR; }
  "while"                   { return TOK_WHILE; }

  /* Identifiers */
  [a-zA-Z_][a-zA-Z_0-9]*    { return TOK_IDENTIFIER; }

  /* Number formats */  
  [0-9]+                    { return TOK_LIT_INTEGER; }
  [0-9]+"."[0-9]+           { return TOK_LIT_REAL; }
  "0x"[0-9a-fA-F]+          { return TOK_LIT_HEX; }
  "0b"[01]+                 { return TOK_LIT_BIN; }
  "0r"[MDCLXVIO]+           { return TOK_LIT_ROM; }
  
  /* Strings */
  ["]                       { return TOK_LIT_STRING; }
  
  /* operators */
  "==="   { return TOK_SEQ; }
  "!=="   { return TOK_SNE; }
  "=="    { return TOK_EQUALS; }
  "!="    { return TOK_NEQUALS; }
  "<="    { return TOK_SE; }
  ">="    { return TOK_GE; }
  "++"    { return TOK_ADDADD; }
  "--"    { return TOK_SUBSUB; }
  "+="    { return TOK_ASSADD; }
  "-="    { return TOK_ASSSUB; }
  "*="    { return TOK_ASSMUL; }
  "/="    { return TOK_ASSDIV; }
  "%="    { return TOK_ASSMOD; }
  "||"    { return TOK_LOGOR; }
  "&&"    { return TOK_LOGAND; }
  ";"     { return TOK_SEMICOLON; }
  ","     { return TOK_COMMA; }
  "="     { return TOK_ASSIGN; }
  "?"     { return TOK_QUESTION; }
  ":"     { return TOK_COLON; }
  "|"     { return TOK_BITOR; }
  "^"     { return TOK_BITXOR; }
  "&"     { return TOK_BITAND; }
  "<"     { return TOK_ST; }
  ">"     { return TOK_GT; }
  "+"     { return TOK_ADDOP; }
  "-"     { return TOK_SUBOP; }
  "*"     { return TOK_MULOP; }
  "/"     { return TOK_DIVOP; }
  "%"     { return TOK_MODOP; }
  "."     { return TOK_DOT; }
  "["     { return TOK_LBRACKET; }
  "]"     { return TOK_RBRACKET; }
  "("     { return TOK_LPAREN; }
  ")"     { return TOK_RPAREN; }
  "{"     { return TOK_LBRACE; }
  "}"     { return TOK_RBRACE; }
  "!"     { return TOK_NOT; }
  
  */
}
